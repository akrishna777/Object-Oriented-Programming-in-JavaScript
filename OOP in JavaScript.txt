Task Day-8

Assignment 1 : https://github.com/rvsp/typescript-oops/blob/master/Practice/Movie.md

Code:
class Movie {
    constructor(title, studio, rating = "PG") {
        this.title = title;
        this.studio = studio;
        this.rating = rating;
    }

    getMovieProperty() {
        return `${this.title}\n${this.studio}\n${this.rating}`
    }

    getPG(array) {
        for (let i = 0; i < array.length; i++) {
            if (array[i].rating === "PG") {
                console.log(array[i])
            }
        }
    }
}

let movie1 = new Movie("Casino Royale", "Eon Productions", "PG 13")
let movie2 = new Movie("The Matrix", " Village Roadshow Pictures", "U/A")
let movie3 = new Movie("Fast & Furious", "Universal Pictures", "R")
let movie4 = new Movie("Despicable Me", "Universal Pictures", "PG")
let movie5 = new Movie("Minions", "Universal Pictures", "PG")

let moviearray = new Movie();
console.log(moviearray.getPG([movie1, movie2, movie3, movie4, movie5]))

Description:
The above code has been written according to the instructions given in the link : https://github.com/rvsp/typescript-oops/blob/master/Practice/Movie.md

Assignment 2: https://github.com/rvsp/typescript-oops/blob/master/Practice/class-circle.md

Code:
class Circle {
    constructor(radius, color) {
        this.radius = radius;
        this.color = color;
    }
    getRadius() {
        return this.radius
    }
    setRadius(newRadius) {
        this.radius = newRadius
    }

    getColor() {
        return this.color
    }
    setColor(newColor) {
        this.color = newColor
    }

    toString() {
        return `Circle[radius=${this.radius}, color=${this.color}]`
    }

    getArea() {
        return Math.PI * this.radius * this.radius
    }

    getCircumference() {
        return 2 * Math.PI * this.radius;
    }
}

Description: The above code has been written according to the instructions given in the link : https://github.com/rvsp/typescript-oops/blob/master/Practice/class-circle.md

Assignment 3: Write a “person” class to hold all the details.

Code:
class Person {
    constructor(name, age, gender, education, address, PhoneNumber) {
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.education = education;
        this.address = address;
        this.PhoneNumber = PhoneNumber;
    }
    getPersonProperty() {
        console.log(`
        name: ${this.name};
        age: = ${this.age};
        gender: = ${this.gender};
        education: = ${this.education};
        address: = ${this.address};
        PhoneNumber: = ${this.PhoneNumber}
        `)
    }
}

let obj = new Person("Manish", 24, "Male", "Full Stack Developer", "Chennai, Tamil Nadu", 7309454620,)

obj.getPersonProperty()

Description: Here we have created a class Person and set a constructor which will hold all the details of the person. Then we have created a method called getPersonProperty which will output all the details we provide in the Person object we create.


Assignment 4: Write a class to calculate uber price.

Uber calculates the costs for its trip based on multiple factors:

Base rate: The base rate is determined by the time and distance of a trip.
Booking fee: In your city, a flat fee might be added to each trip. It helps support operational, regulatory, and safety costs.

Busy times and areas: When there are more riders than available drivers, prices may temporarily increase until the marketplace is rebalanced.
Your fare may increase if you travel to a different destination or make extra stops along the route, or the trip takes much longer than expected.
If an upfront fare is not honored, you will either be charged the minimum fare or a fare based on the measured time and distance for your trip, including any base fare, booking fee, surcharges, tolls, and other relevant factors such as a dynamic pricing charge.
Thanks to Ride.guru we have an example:

Your Uber fare is first calculated the following criterias:

Base (or initial) fare – A flat fee charged at the beginning of every ride

Cost per minute – How much you are charged for each minute you are inside the ride

Cost per mile – How much you are charged for each mile of the ride

Booking Fee (Formerly ‘Safe Rides Fee’) – A flat fee to cover Uber’s ‘operating costs’ (Not included for Uber’s more luxury services like UberBlack or UberSUV)

Formula : Base Fare + (Cost per minute * time in ride) + (Cost per mile * ride distance) + Booking Fee = Your Fare


Code:

class Fare {
    static baseFare = 100;
    static costPerMinute = 6;
    static costPerMile = 8
    static bookingFee = 80

    constructor(timeInRide = 0, totalDistance = 0) {
        this.timeInRide = timeInRide
        this.totalDistance = totalDistance
    }

    totalFare() {
        let calculatedPrice = Fare.baseFare + (Fare.costPerMinute * this.timeInRide) + (Fare.costPerMile * this.totalDistance) + Fare.bookingFee
        return calculatedPrice
    }
}

let Fare1 = new Fare()
console.log(Fare1.totalFare())

Description: In the above code we have defined a class which will calculate the total fare for each ride. In this we have taken static variable which are our fixed charges. then we have defined our constructor which will calculate the price b taking the total time of ride or total distance if that is the ways fare has to be calulated. If those 2 arguments are kept empty then total fare will be the sum of all fixed charges. Then our method totalFare will calculate the total fare by summing all the provided values.



